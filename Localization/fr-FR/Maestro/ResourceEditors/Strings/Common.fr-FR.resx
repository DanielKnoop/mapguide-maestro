<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllFiles" xml:space="preserve">
    <value>Tous les fichiers (*.*)</value>
    <comment>The item displayed when browsing for files</comment>
  </data>
  <data name="ASCIIFiles" xml:space="preserve">
    <value>Fichier ASCII (*.asc)</value>
    <comment>The item displayed when browsing for asc files</comment>
  </data>
  <data name="CSVFiles" xml:space="preserve">
    <value>Valeurs séparées par une virgule (*.csv)</value>
    <comment>The item displayed when browsing for csv files</comment>
  </data>
  <data name="dBaseFiles" xml:space="preserve">
    <value>Base de données dBase (*.dbf)</value>
    <comment>The item displayed when browsing for dbf files</comment>
  </data>
  <data name="SQLiteDbFiles" xml:space="preserve">
    <value>Base de données SQLite (*.db)</value>
    <comment>The item displayed when browsing for db files</comment>
  </data>
  <data name="FirebirdFiles" xml:space="preserve">
    <value>Base de données Firebird (*.fdb)</value>
    <comment>The item displayed when browsing for fdb files</comment>
  </data>
  <data name="KMLFiles" xml:space="preserve">
    <value>Fichier KML (*.kml)</value>
    <comment>The item displayed when browsing for KML files</comment>
  </data>
  <data name="AccessDatabaseFiles" xml:space="preserve">
    <value>Base de données Access (*.mdb)</value>
    <comment>The item displayed when browsing for mdb files</comment>
  </data>
  <data name="MissingMethod" xml:space="preserve">
    <value>Cette méthode n'est pas encore implémentée</value>
    <comment>A message that is displayed when the user activates a feature that is not yet written</comment>
  </data>
  <data name="SQLiteFiles" xml:space="preserve">
    <value>Base de données SQLite (*.sqlite)</value>
    <comment>The item displayed when browsing for sqlite files</comment>
  </data>
  <data name="TABFiles" xml:space="preserve">
    <value>Valeurs séparées par une tabulation (*.tab)</value>
    <comment>The item displayed when browsing for tab files</comment>
  </data>
  <data name="TextFiles" xml:space="preserve">
    <value>Ficheir Texte (*.txt)</value>
    <comment>The item displayed when browsing for txt files</comment>
  </data>
  <data name="ExcelFiles" xml:space="preserve">
    <value>Tableur Excel (*.xls)</value>
    <comment>The item displayed when browsing for xls files</comment>
  </data>
  <data name="DGNFiles" xml:space="preserve">
    <value>Fichier DGN (*.dgn)</value>
    <comment>The item displayed when browsing for dgn files</comment>
  </data>
  <data name="GMLFiles" xml:space="preserve">
    <value>Fichier GML (*.gml)</value>
    <comment>The item displayed when browsing for gml files</comment>
  </data>
  <data name="MapInfoInterchangeFiles" xml:space="preserve">
    <value>MapInfo Interchange (*.mif)</value>
    <comment>The item displayed when browsing for mif files</comment>
  </data>
  <data name="MapInfoNativeFiles" xml:space="preserve">
    <value>MapInfo Native (*.tab)</value>
    <comment>The item displayed when browsing for tab files</comment>
  </data>
  <data name="S57Files" xml:space="preserve">
    <value>S-57 (*.s57)</value>
    <comment>The item displayed when browsing for s57 files</comment>
  </data>
  <data name="ShapeFiles" xml:space="preserve">
    <value>Fichier Shape (*.shp)</value>
    <comment>The item displayed when browsing for shp files</comment>
  </data>
  <data name="SDFFiles" xml:space="preserve">
    <value>Fichiers SDF (*.sdf)</value>
    <comment>The item displayed when browsing for sdf files</comment>
  </data>
  <data name="SQLite3Files" xml:space="preserve">
    <value>Fichiers SQLite3 (*.sqlite3)</value>
    <comment>The item displayed when browsing for sqlite3 files</comment>
  </data>
  <data name="AssemblyDataInternalError" xml:space="preserve">
    <value>Échec lors de la lecture des données de l'assemblage</value>
    <comment>An error message displayed if an internal resource fails to load</comment>
  </data>
  <data name="GenericError" xml:space="preserve">
    <value>Une erreur s'est produite : {0}</value>
    <comment>An error message that is displayed when an unexpected error occurs</comment>
  </data>
  <data name="InfiniteValue" xml:space="preserve">
    <value>infini</value>
    <comment>A value that is displayed when the value assigned is infinite</comment>
  </data>
  <data name="InvalidValueError" xml:space="preserve">
    <value>Valeur invalide</value>
    <comment>An error message that is displayed when the entered value is invalid</comment>
  </data>
  <data name="EmptyText" xml:space="preserve">
    <value>Aucun</value>
    <comment>The text used for rendering examples with no text data</comment>
  </data>
</root>
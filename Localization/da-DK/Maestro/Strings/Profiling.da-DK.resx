<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CloseButtonText" xml:space="preserve">
    <value>Luk</value>
    <comment>The text on the close button</comment>
  </data>
  <data name="LayerDefinitionProfilingError" xml:space="preserve">
    <value>En fejl opstod under profilering af LayerDefinition: {0},
Fejlbesked: {1}</value>
    <comment>An error message that is displayed when the layer definition profiling fails</comment>
  </data>
  <data name="LogMessageDone" xml:space="preserve">
    <value>*** Færdig ***</value>
    <comment>A message written in the log to indicate that the operation is complete</comment>
  </data>
  <data name="LogMessageFeatureSource" xml:space="preserve">
    <value>Profilerer FeatureSource: {0}</value>
    <comment>A message written in the log when profiling a featuresource</comment>
  </data>
  <data name="LogMessageIdentifyFetching" xml:space="preserve">
    <value>Hent identitetskolonne:</value>
    <comment>A message written in the log when profiling identity fetching</comment>
  </data>
  <data name="LogMessageLayerDefinition" xml:space="preserve">
    <value>Profilerer LayerDefinition: {0}</value>
    <comment>A message written in the log when profiling a layerdefinition</comment>
  </data>
  <data name="LogMessageMapDefinition" xml:space="preserve">
    <value>Profilerer MapDefinition: {0}</value>
    <comment>A message written in the log when profiling a mapdefinition</comment>
  </data>
  <data name="LogMessageRenderingMap" xml:space="preserve">
    <value>Fuld rendering af kort:</value>
    <comment>A message written in the log when profiling runtime map rendering</comment>
  </data>
  <data name="LogMessageRenderingScales" xml:space="preserve">
    <value>Rendering af zoomeniveauer:</value>
    <comment>A message written in the log when profiling a scale rendering</comment>
  </data>
  <data name="LogMessageRuntimeLayer" xml:space="preserve">
    <value>Oprettelse af runtime lag:</value>
    <comment>A message written in the log when profiling a runtime layer creation</comment>
  </data>
  <data name="LogMessageRuntimeMap" xml:space="preserve">
    <value>Total tid for at danne runtime map:</value>
    <comment>A message written in the log when profiling runtime map generation</comment>
  </data>
  <data name="LogMessageRuntimeMapTotal" xml:space="preserve">
    <value>Runtime map i ét kald:</value>
    <comment>A message written in the log when profiling runtime map generation</comment>
  </data>
  <data name="LogMessageScaleRange" xml:space="preserve">
    <value>Zoomvieau [{0} : {1}]:</value>
    <comment>A message written in the log when profiling a certain scalerange</comment>
  </data>
  <data name="LogMessageUnsupportedResourceType" xml:space="preserve">
    <value>Denne element type understøtter ikke profilering</value>
    <comment>A message written in the log if a certain resource is not supported</comment>
  </data>
  <data name="MapRenderingError" xml:space="preserve">
    <value>En fejl opstod under profilering af MapDefinition rendering: {0},
Fejlbesked: {1}</value>
    <comment>An error message displayed when profiling mapdefinition rendering fails</comment>
  </data>
  <data name="RuntimeMapProfilingError" xml:space="preserve">
    <value>En fejl opstod under profilering af MapDefinition runtime: {0},
Fejlbesked: {1}</value>
    <comment>An error message displayed when profiling a mapdefinition fails</comment>
  </data>
</root>
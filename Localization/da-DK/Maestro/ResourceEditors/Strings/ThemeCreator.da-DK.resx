<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BetweenLabel" xml:space="preserve">
    <value>Mellem {0} og {1}</value>
    <comment>The label used for all "between" values in the graduated theme set</comment>
  </data>
  <data name="ColumnHasNoValidDataError" xml:space="preserve">
    <value>Den valgte kolonne har ingen værdier der ikke er null,
og kan derfor ikke bruges.</value>
    <comment>An error message that is displayed if the user selects a column with no valid data</comment>
  </data>
  <data name="DataReadError" xml:space="preserve">
    <value>Kan ikke læse data fra den valgte kolonne: {0}</value>
    <comment>An error message that is displayed when the column read fails</comment>
  </data>
  <data name="InvalidColumnNameError" xml:space="preserve">
    <value>Ugyldigt kolonne navn</value>
    <comment>An error message that is displayed when the column selected does not exist</comment>
  </data>
  <data name="LessThanLabel" xml:space="preserve">
    <value>Mindre end {0}</value>
    <comment>The label used for the lowest value in the graduated theme set</comment>
  </data>
  <data name="MoreThanLabel" xml:space="preserve">
    <value>Mere end {0}</value>
    <comment>The label used for the highest value in the graduated theme set</comment>
  </data>
  <data name="SelectColumnPlaceholder" xml:space="preserve">
    <value>&lt;Vælg kolonne&gt;</value>
    <comment>A placeholder message displayed when the user has not yet selected a column</comment>
  </data>
  <data name="TooManyIndiviualValuesError" xml:space="preserve">
    <value>Den valgte kolonne indeholder mere end {0} forskellige værdier og kan derfor ikke bruges til tematisering med individuelle værdier.</value>
    <comment>An error message that is displayed if the selected column has too many distinct values</comment>
  </data>
  <data name="TooManyRulesWarning" xml:space="preserve">
    <value>Du er ved at danne et stort antal regler, som formentlig vil gøre Maestro langsom.
Er du sikker på at du vil fortsætte?</value>
    <comment>A warning message that is displayed if the user has selected options that will generate a very large number of rules</comment>
  </data>
  <data name="TooManyValuesError" xml:space="preserve">
    <value>Den valgte kolonne indeholder mere end {0} forskellige værdier og kan derfor ikke bruges til tematisering</value>
    <comment>An error message that is displayed if the selected column has too many distinct values</comment>
  </data>
  <data name="TooMuchDataWarning" xml:space="preserve">
    <value>Den valgte kolonne indeholder mere end {0} forskelige værdier.
De beregnede gennemsnit er kun baseret på de første {1} forskellige værdier.</value>
    <comment>A warning message that is displayed if the dataset is too large</comment>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DrawingLayerDefinitionNotSupportedWarning" xml:space="preserve">
    <value>Only vector layers and raster layers are currently validated</value>
    <comment>A warning message that is displayed if the layer is not Grid or Vector</comment>
  </data>
  <data name="DrawingLayerNotSupportedWarning" xml:space="preserve">
    <value>Maestro does not support DrawingLayers</value>
    <comment>A warning message that is displayed if the layer is a DrawingLayer type</comment>
  </data>
  <data name="FeatureSourceLoadError" xml:space="preserve">
    <value>Failed to load featuresource</value>
    <comment>An error message that is displayed if the featuresource fails to load</comment>
  </data>
  <data name="GeometryMissingError" xml:space="preserve">
    <value>Failed to find geometry column {0} in schema {1} on featuresource {2}</value>
    <comment>An error message that is displayed if the geometry is not present in the selected schema</comment>
  </data>
  <data name="LayerNullError" xml:space="preserve">
    <value>Layer is missing core information</value>
    <comment>An error message that is displayed if the layer has a null reference</comment>
  </data>
  <data name="MinAndMaxScaleSwappedError" xml:space="preserve">
    <value>The minimum scale ({0}) is larger than the maximum scale ({1})</value>
    <comment>An error message that is displayed if the scale ranges are reversed</comment>
  </data>
  <data name="MissingFeatureSourceError" xml:space="preserve">
    <value>No FeatureSource is assigned to the layer</value>
    <comment>An error message that is displayed if the layer has no FeatureSource</comment>
  </data>
  <data name="MissingGeometryError" xml:space="preserve">
    <value>No Geometry is assigned to the layer</value>
    <comment>An error message that is displayed if the layer has no geometry column selected</comment>
  </data>
  <data name="MissingScaleRangesError" xml:space="preserve">
    <value>No scale ranges are defined, no data can be displayed</value>
    <comment>An error message that is displayed if there are no scale ranges defined</comment>
  </data>
  <data name="MultipleScaleRangesWarning" xml:space="preserve">
    <value>More than one scale ranges is defined, this is valid, but unsupported by Maestro</value>
    <comment>A warning message that is displayed if a raster layer has multiple scale ranges defined</comment>
  </data>
  <data name="ScaleRangesOverlapInformation" xml:space="preserve">
    <value>The scale range {0}-{1} overlaps the range {2}-{3}</value>
    <comment>A warning message that is displayed if two scaleranges overlap</comment>
  </data>
  <data name="SchemaAndColumnReadFailedError" xml:space="preserve">
    <value>Failed to validate column and schema</value>
    <comment>An error message that is displayed if the schema and column read fails</comment>
  </data>
  <data name="SchemaMissingError" xml:space="preserve">
    <value>Failed to find schema {0} in featuresource {1}</value>
    <comment>An error message that is displayed if the selected schema is not present in the FeatureSource</comment>
  </data>
  <data name="UnsupportedLayerTypeWarning" xml:space="preserve">
    <value>The layer has no type, or the type is unsupported by Maestro</value>
    <comment>A  warning message that is displayed if the layer type is unknown</comment>
  </data>
</root>